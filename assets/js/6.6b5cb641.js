(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{358:function(t,s,a){t.exports=a.p+"assets/img/image-20230405184522049.8bdf38cd.png"},359:function(t,s,a){t.exports=a.p+"assets/img/image-20230405184544225.8436254f.png"},360:function(t,s,a){t.exports=a.p+"assets/img/image-20230405184610602.385db197.png"},361:function(t,s,a){t.exports=a.p+"assets/img/image-20230405184620049.9630de65.png"},362:function(t,s,a){t.exports=a.p+"assets/img/image-20230408120614204.4b876c10.png"},387:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"缓存一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性"}},[t._v("#")]),t._v(" 缓存一致性")]),t._v(" "),s("h3",{attrs:{id:"缓存一致性更新策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性更新策略"}},[t._v("#")]),t._v(" 缓存一致性更新策略")]),t._v(" "),s("h4",{attrs:{id:"更新缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新缓存"}},[t._v("#")]),t._v(" 更新缓存")]),t._v(" "),s("h5",{attrs:{id:"先更新数据库再更新缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先更新数据库再更新缓存"}},[t._v("#")]),t._v(" 先更新数据库再更新缓存")]),t._v(" "),s("p",[s("img",{attrs:{src:a(358),alt:"image-20230405184522049"}})]),t._v(" "),s("p",[t._v("线程1先将数据库的数据更新为 1，然后在更新缓存前，线程2 将数据库的数据更新为 2，并且将缓存更新为 2，然后线程1继续执行将缓存的数据更新为1。")]),t._v(" "),s("p",[t._v("此时，数据库中的数据是 2，而缓存中的数据却是 1，"),s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("出现了缓存和数据库中的数据不一致的现象")])]),t._v("。")]),t._v(" "),s("h5",{attrs:{id:"先更新缓存再更新数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先更新缓存再更新数据库"}},[t._v("#")]),t._v(" 先更新缓存再更新数据库")]),t._v(" "),s("p",[s("img",{attrs:{src:a(359),alt:"image-20230405184544225"}})]),t._v(" "),s("p",[t._v("线程1先将缓存的数据更新为 1，然后在更新数据库前，线程2 将缓存的数据更新为 2，并且将数据库的数据更新为 2，然后线程1继续执行将数据库的数据更新为1。")]),t._v(" "),s("p",[t._v("此时，数据库中的数据是 2，而缓存中的数据却是 1，"),s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("出现了缓存和数据库中的数据不一致的现象")])]),t._v("。")]),t._v(" "),s("p",[t._v("从以上分析来看无论是"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新数据库，在更新缓存】")]),t._v("还是"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新缓存，再更新数据库】")]),t._v("都会出现缓存和数据库数据不一致的问题，两种方案相比较，"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新数据库，再更新缓存】")]),t._v("出现的概率更低，因为更新缓存相较于更新数据库要快很多，所以并容易出现线程2已经更新完数据库并且更新完缓存的情况下，线程1才更新完缓存。而且业务上一般以数据库的数据为准，"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新缓存，再更新数据库】")]),t._v("数据库的让然是旧值，所以"),s("span",{staticStyle:{color:"red"}},[t._v("不推荐【先更新缓存，再更新数据库】")]),t._v("；")]),t._v(" "),s("h4",{attrs:{id:"删除缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除缓存"}},[t._v("#")]),t._v(" 删除缓存")]),t._v(" "),s("h5",{attrs:{id:"先删除缓存再更新数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先删除缓存再更新数据库"}},[t._v("#")]),t._v(" 先删除缓存再更新数据库")]),t._v(" "),s("p",[s("img",{attrs:{src:a(360),alt:"image-20230405184610602"}})]),t._v(" "),s("p",[t._v("线程1先删除缓存中的数据，此时线程2过来查询，发现缓存不存在数据则会去数据库查询，然后将查询的结果更新到缓存，然后线程1继续执行去更新数据库")]),t._v(" "),s("p",[t._v("此时，数据库中的数据是 2，而缓存中的数据仍然是旧值 1，"),s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("出现了缓存和数据库中的数据不一致的现象")])]),t._v("。")]),t._v(" "),s("h6",{attrs:{id:"解决方案延时双删"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方案延时双删"}},[t._v("#")]),t._v(" 解决方案延时双删")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateOrder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        redisTemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        orderDao"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        redisTemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("加上sleep的这段时间，就是为了让线程1在水面的这段时间内，线程2能够先从数据库读取数据，再把数据写回缓存，然后线程1再进行删除，索引线程1 的sleep的时间必须大于线程2从数据库读取数据并写回缓存的时间。这样其他线程来查询数据时法相缓存失效，则会从数据库取最新数据并重新写回缓存，")]),t._v(" "),s("h5",{attrs:{id:"先更新数据库再删除缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先更新数据库再删除缓存"}},[t._v("#")]),t._v(" 先更新数据库再删除缓存")]),t._v(" "),s("p",[s("img",{attrs:{src:a(361),alt:"image-20230405184620049"}})]),t._v(" "),s("p",[t._v("线程2先来查询数据，正好此时缓存中数据过了有效期，索引线程2需要去查询数据库，查询到的数据是1，准备更新缓存时，线程1过来更新了数据库的数据并且删除了缓存，线程1执行完成后，线程2继续执行更新缓存的操作。")]),t._v(" "),s("p",[t._v("此时，数据库中的数据是 2，而缓存中的数据仍然是旧值 1，"),s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("出现了缓存和数据库中的数据不一致的现象")])]),t._v("。")]),t._v(" "),s("p",[t._v("从以上分析来看无论是"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先删除缓存，再更新数据库】")]),t._v("还是"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新数据库，再删除缓存】")]),t._v("都会出现缓存和数据库数据不一致的问题，两种方案相比较，"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新数据库，再删除缓存】")]),t._v("出现的概率更低，因为更新缓存相较于更新数据库要快很多，所以很难出现线程1已经更新完数据库并且删除完缓存的情况下，线程1才更新完缓存")]),t._v(" "),s("p",[t._v("所以"),s("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[t._v("【先更新数据库，再删除缓存】")]),t._v("是可以保证缓存一致性的，为了避免出现上述不一致的情况，还可以给缓存加一个过期时间进行兜底，即使真的出现不一致的情况，等缓存失效后也可以重新将新数据从数据库查询回来更新到缓存中")]),t._v(" "),s("h4",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("h3",{attrs:{id:"如何保证数据库和缓存操作的原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何保证数据库和缓存操作的原子性"}},[t._v("#")]),t._v(" 如何保证数据库和缓存操作的原子性")]),t._v(" "),s("p",[t._v("先更新数据库，再删除缓存是两个操作，如果更新数据库成功，但后续删除缓存失败，就会导致数据库中已经更新为新值了，而缓存中还是旧值；")]),t._v(" "),s("p",[s("img",{attrs:{src:a(362),alt:"image-20230408120614204"}})]),t._v(" "),s("p",[t._v("如图，线程1来更新缓存后删除缓存，但是删除缓存时失败，导致缓存中还是旧值 1，现成2过来查询，因为缓存没有删除，所以查询可以命中缓存，然后返回的缓存中的旧值")]),t._v(" "),s("p",[t._v("其实无论那种策略，两个操作是非原子性的，只要有一个失败必定会出现缓存不一致的情况")]),t._v(" "),s("p",[t._v("解决办法:")]),t._v(" "),s("ol",[s("li",[t._v("重试机制；")]),t._v(" "),s("li",[t._v("两个操作放在一个事务中，单体应用可以采用数据库事务，分布式应用可以采用分布式事务；")]),t._v(" "),s("li",[t._v("订阅MySQL binlog")])]),t._v(" "),s("h3",{attrs:{id:"结论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("更新缓存还是删除缓存；")])]),t._v(" "),s("li",[s("p",[t._v("先操作数据库还是先操作缓存；")]),t._v(" "),s("ul",[s("li",[t._v("更新缓存：每次更新缓存都需要更新数据库，如果这中间没有查询操作，那么对缓存的更新都是无效的操作；可以确保每次请求都可以命中缓存；")]),t._v(" "),s("li",[t._v("删除缓存：更新数据库时让缓存失效，查询时再更新缓存，可以减少对缓存的无效操作，但删除缓存会影响缓存命中率，如果这时出现并发请求会导致数据库承担较大压力")])])]),t._v(" "),s("li",[s("p",[t._v("如何保证数据库操作和缓存操作的原子性；")]),t._v(" "),s("p",[t._v("单体应用可以选择数据库事务，将缓存操作和数据库操作都放在数据库事务中")]),t._v(" "),s("p",[t._v("分布式系统可以选择分布式事务")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);