(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{436:function(s,t,a){s.exports=a.p+"assets/img/image-20230405184522049.8bdf38cd.png"},437:function(s,t,a){s.exports=a.p+"assets/img/image-20230405184544225.8436254f.png"},438:function(s,t,a){s.exports=a.p+"assets/img/image-20230405184610602.385db197.png"},439:function(s,t,a){s.exports=a.p+"assets/img/image-20230405184620049.9630de65.png"},440:function(s,t,a){s.exports=a.p+"assets/img/image-20230408120614204.4b876c10.png"},441:function(s,t,a){s.exports=a.p+"assets/img/image-20231103174154306.00234a89.png"},483:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"缓存一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性"}},[s._v("#")]),s._v(" 缓存一致性")]),s._v(" "),t("h3",{attrs:{id:"缓存一致性更新策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性更新策略"}},[s._v("#")]),s._v(" 缓存一致性更新策略")]),s._v(" "),t("h4",{attrs:{id:"更新缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新缓存"}},[s._v("#")]),s._v(" 更新缓存")]),s._v(" "),t("h5",{attrs:{id:"先更新数据库再更新缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先更新数据库再更新缓存"}},[s._v("#")]),s._v(" 先更新数据库再更新缓存")]),s._v(" "),t("p",[t("img",{attrs:{src:a(436),alt:"image-20230405184522049"}})]),s._v(" "),t("p",[s._v("线程1先将数据库的数据更新为 1，然后在更新缓存前，线程2 将数据库的数据更新为 2，并且将缓存更新为 2，然后线程1继续执行将缓存的数据更新为1。")]),s._v(" "),t("p",[s._v("此时，数据库中的数据是 2，而缓存中的数据却是 1，"),t("strong",[t("span",{staticStyle:{color:"red"}},[s._v("出现了缓存和数据库中的数据不一致的现象")])]),s._v("。")]),s._v(" "),t("h5",{attrs:{id:"先更新缓存再更新数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先更新缓存再更新数据库"}},[s._v("#")]),s._v(" 先更新缓存再更新数据库")]),s._v(" "),t("p",[t("img",{attrs:{src:a(437),alt:"image-20230405184544225"}})]),s._v(" "),t("p",[s._v("线程1先将缓存的数据更新为 1，然后在更新数据库前，线程2 将缓存的数据更新为 2，并且将数据库的数据更新为 2，然后线程1继续执行将数据库的数据更新为1。")]),s._v(" "),t("p",[s._v("此时，数据库中的数据是 2，而缓存中的数据却是 1，"),t("strong",[t("span",{staticStyle:{color:"red"}},[s._v("出现了缓存和数据库中的数据不一致的现象")])]),s._v("。")]),s._v(" "),t("p",[s._v("从以上分析来看无论是"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新数据库，在更新缓存】")]),s._v("还是"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新缓存，再更新数据库】")]),s._v("都会出现缓存和数据库数据不一致的问题，两种方案相比较，"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新数据库，再更新缓存】")]),s._v("出现的概率更低，因为更新缓存相较于更新数据库要快很多，所以并容易出现线程2已经更新完数据库并且更新完缓存的情况下，线程1才更新完缓存。而且业务上一般以数据库的数据为准，"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新缓存，再更新数据库】")]),s._v("数据库的让然是旧值，所以"),t("span",{staticStyle:{color:"red"}},[s._v("不推荐【先更新缓存，再更新数据库】")]),s._v("；")]),s._v(" "),t("h4",{attrs:{id:"删除缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除缓存"}},[s._v("#")]),s._v(" 删除缓存")]),s._v(" "),t("h5",{attrs:{id:"先删除缓存再更新数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先删除缓存再更新数据库"}},[s._v("#")]),s._v(" 先删除缓存再更新数据库")]),s._v(" "),t("p",[t("img",{attrs:{src:a(438),alt:"image-20230405184610602"}})]),s._v(" "),t("p",[s._v("线程1先删除缓存中的数据，此时线程2过来查询，发现缓存不存在数据则会去数据库查询，然后将查询的结果更新到缓存，然后线程1继续执行去更新数据库")]),s._v(" "),t("p",[s._v("此时，数据库中的数据是 2，而缓存中的数据仍然是旧值 1，"),t("strong",[t("span",{staticStyle:{color:"red"}},[s._v("出现了缓存和数据库中的数据不一致的现象")])]),s._v("。")]),s._v(" "),t("h6",{attrs:{id:"解决方案延时双删"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案延时双删"}},[s._v("#")]),s._v(" 解决方案延时双删")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateOrder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Order")]),s._v(" order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        redisTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        orderDao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("update")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SECONDS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("debug")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMessage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        redisTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("order"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("加上sleep的这段时间，就是为了让线程1在水面的这段时间内，线程2能够先从数据库读取数据，再把数据写回缓存，然后线程1再进行删除，索引线程1 的sleep的时间必须大于线程2从数据库读取数据并写回缓存的时间。这样其他线程来查询数据时法相缓存失效，则会从数据库取最新数据并重新写回缓存，")]),s._v(" "),t("h5",{attrs:{id:"先更新数据库再删除缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先更新数据库再删除缓存"}},[s._v("#")]),s._v(" 先更新数据库再删除缓存")]),s._v(" "),t("p",[t("img",{attrs:{src:a(439),alt:"image-20230405184620049"}})]),s._v(" "),t("p",[s._v("线程2先来查询数据，正好此时缓存中数据过了有效期，索引线程2需要去查询数据库，查询到的数据是1，准备更新缓存时，线程1过来更新了数据库的数据并且删除了缓存，线程1执行完成后，线程2继续执行更新缓存的操作。")]),s._v(" "),t("p",[s._v("此时，数据库中的数据是 2，而缓存中的数据仍然是旧值 1，"),t("strong",[t("span",{staticStyle:{color:"red"}},[s._v("出现了缓存和数据库中的数据不一致的现象")])]),s._v("。")]),s._v(" "),t("p",[s._v("从以上分析来看无论是"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先删除缓存，再更新数据库】")]),s._v("还是"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新数据库，再删除缓存】")]),s._v("都会出现缓存和数据库数据不一致的问题，两种方案相比较，"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新数据库，再删除缓存】")]),s._v("出现的概率更低，因为更新缓存相较于更新数据库要快很多，所以很难出现线程1已经更新完数据库并且删除完缓存的情况下，线程1才更新完缓存")]),s._v(" "),t("p",[s._v("所以"),t("span",{staticStyle:{color:"rgb(0, 150, 255)"}},[s._v("【先更新数据库，再删除缓存】")]),s._v("是可以保证缓存一致性的，为了避免出现上述不一致的情况，还可以给缓存加一个过期时间进行兜底，即使真的出现不一致的情况，等缓存失效后也可以重新将新数据从数据库查询回来更新到缓存中")]),s._v(" "),t("h4",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("一致性要求高")]),s._v(" "),t("p",[t("mark",[s._v("先更新数据库再删除缓存")]),s._v("可以保证较强的一致性，在读数据的时候加上读锁，允许多个线程同时读取缓存的数据，当有数据更新是可以加上写锁，只允许一个线程更新数据库和缓存.")]),s._v(" "),t("p",[s._v("采用Redisson提供的读写锁")]),s._v(" "),t("ul",[t("li",[s._v("共享锁，读锁ReadLock，加锁之后，其它线程可以共享读操作不允许写操作。")]),s._v(" "),t("li",[s._v("排它锁，独占锁WriteLock,加锁之后不允许其它线程读和写操作。")])]),s._v(" "),t("p",[s._v("允许延迟一致")]),s._v(" "),t("ul",[t("li",[s._v("异步通知更新缓存，使用MQ中间件，在数据更新之后通知缓存服务更新缓存")]),s._v(" "),t("li",[s._v("使用canal中间件，不需要修改业务代码，伪装为一个MySQL的从节点，canal通过读取MySQL的Binlog日志更新缓存")])]),s._v(" "),t("h3",{attrs:{id:"数据库和缓存操作的原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库和缓存操作的原子性"}},[s._v("#")]),s._v(" 数据库和缓存操作的原子性")]),s._v(" "),t("p",[s._v("先更新数据库，再删除缓存是两个操作，如果更新数据库成功，但后续删除缓存失败，就会导致数据库中已经更新为新值了，而缓存中还是旧值；")]),s._v(" "),t("p",[t("img",{attrs:{src:a(440),alt:"image-20230408120614204"}})]),s._v(" "),t("p",[s._v("如图，线程1来更新缓存后删除缓存，但是删除缓存时失败，导致缓存中还是旧值 1，现成2过来查询，因为缓存没有删除，所以查询可以命中缓存，然后返回的缓存中的旧值")]),s._v(" "),t("p",[s._v("其实无论那种策略，两个操作是非原子性的，只要有一个失败必定会出现缓存不一致的情况")]),s._v(" "),t("p",[s._v("解决办法:")]),s._v(" "),t("ol",[t("li",[s._v("重试机制；")]),s._v(" "),t("li",[s._v("两个操作放在一个事务中，单体应用可以采用数据库事务，分布式应用可以采用分布式事务；")]),s._v(" "),t("li",[s._v("订阅MySQL binlog")])]),s._v(" "),t("h3",{attrs:{id:"结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[s._v("#")]),s._v(" 结论")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("更新缓存还是删除缓存；")])]),s._v(" "),t("li",[t("p",[s._v("先操作数据库还是先操作缓存；")]),s._v(" "),t("ul",[t("li",[s._v("更新缓存：每次更新缓存都需要更新数据库，如果这中间没有查询操作，那么对缓存的更新都是无效的操作；可以确保每次请求都可以命中缓存；")]),s._v(" "),t("li",[s._v("删除缓存：更新数据库时让缓存失效，查询时再更新缓存，可以减少对缓存的无效操作，但删除缓存会影响缓存命中率，如果这时出现并发请求会导致数据库承担较大压力")])])]),s._v(" "),t("li",[t("p",[s._v("如何保证数据库操作和缓存操作的原子性；")]),s._v(" "),t("p",[s._v("单体应用可以选择数据库事务，将缓存操作和数据库操作都放在数据库事务中")]),s._v(" "),t("p",[s._v("分布式系统可以选择分布式事务")])])]),s._v(" "),t("h2",{attrs:{id:"缓存问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存问题"}},[s._v("#")]),s._v(" 缓存问题")]),s._v(" "),t("h3",{attrs:{id:"缓存穿透"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),t("p",[s._v("缓存穿透是指用户访问的数据，"),t("mark",[s._v("既不在缓存中也不在数据库中")]),s._v("，请求先去访问缓存，发现缓存中不存在数据，再去访问数据库时，发现数据库中也不存在数据，因此无法构建缓存，后续所有的请求都会穿过缓存去访问数据库。如果此时有大量的请求过来，就会导致数据库的压力骤增进而导致数据库崩溃。")]),s._v(" "),t("p",[s._v("解决方案：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("限制非法请求")]),s._v(" "),t("p",[s._v("用户请求的数据几步存在缓存中也不存在数据库中，说明这个请求可能是非法的，所以在请求API时我们需要判断请求参数是否合理，如果判断请求非法就直接返回错误，避免再去请求缓存和数据库。")])]),s._v(" "),t("li",[t("p",[s._v("缓存空数据")]),s._v(" "),t("p",[s._v("当查询的数据不存在时，可以在缓存中设置一个空数据或默认值，当后续发生相同的请求时就可以从缓存中读取数据，避免请求发到数据库。")]),s._v(" "),t("p",[s._v("优点：简单")]),s._v(" "),t("p",[s._v("缺点：")]),s._v(" "),t("ul",[t("li",[s._v("可能需要缓存很多空数据小号较多 的内存，")]),s._v(" "),t("li",[s._v("会造成数据不一致，第一次查询数据不存在缓存了空数据，后续新增了这条数据，但是缓存中数据的值还是空的。")])])]),s._v(" "),t("li",[t("p",[s._v("布隆过滤器")]),s._v(" "),t("p",[s._v("优点：内存占用较少，没有多余key")]),s._v(" "),t("p",[s._v("缺点：实现复杂，存在误判，当出现哈希冲突时，查询布隆过滤器数据存在，但是数据库和缓存中却不存在数据，仍然有可能发生缓存穿透。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(441),alt:"image-20231103174154306"}})])])]),s._v(" "),t("h4",{attrs:{id:"布隆过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器"}},[s._v("#")]),s._v(" 布隆过滤器")]),s._v(" "),t("p",[s._v("布隆过滤器是一个bitmap位图，相当于是一个一bit位为单位的数组，数组中每个单元只能存储二进制数0或1；")]),s._v(" "),t("p",[s._v("存储数据时，将key值经过多个不同的哈希算法过得哈希值，根据哈希计算数组对应的位置改为1；")]),s._v(" "),t("p",[s._v("查询数据时，使用相同的哈希函数获得多个哈希值，判断数组对应位置是否都为1，只要有一个不为1，说明数据不存在数据库中；")]),s._v(" "),t("p",[s._v("布隆过滤器由于是基于哈希函数实现查找的，所以可能会产生哈希冲突的情况，比如两个不同的key1和key2经过哈希之后可能都落在相同的位置或者当前key经过多个哈希之后每个哈希索引的位置正好都是1，而数据库中却不存在当前数据，存在误判的情况。")]),s._v(" "),t("p",[s._v("所以，"),t("strong",[s._v("查询布隆过滤器说数据存在，并不一定证明数据库中存在这个数据，但是查询到数据不存在，数据库中一定就不存在这个数据")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"缓存击穿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[s._v("#")]),s._v(" 缓存击穿")]),s._v(" "),t("p",[s._v("给一个key设置了过期时间，当这个key过期时，大量的请求过来查询这个key，由于缓存过期，这些请求都会请求数据库，大量的请求击垮数据库")]),s._v(" "),t("p",[s._v("解决方案：")]),s._v(" "),t("ol",[t("li",[s._v("互斥锁，保证同一时刻只有一个线程去查询数据库更新缓存，其它没有获取互斥锁的线程等待锁释放后重新读取缓存")]),s._v(" "),t("li",[s._v("异步更新缓存，不给热点数据设置过期时间，由后台线程异步更新缓存，")]),s._v(" "),t("li",[s._v("逻辑过期，给热点数据设置逻辑过期时间，每次查询数据后判断数据的逻辑时间是否过期，如果过期则开启一个线程去更新缓存。")])]),s._v(" "),t("h3",{attrs:{id:"缓存雪崩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),t("p",[s._v("缓存雪崩是指同一时间大量的缓存"),t("mark",[s._v("同时失效")]),s._v("或者"),t("mark",[s._v("Redis服务宕机")]),s._v("，此时有大量的请求到达无法再缓存中处理，这些请求都会发送到数据库，导致数据库压力骤增进而会造成数据库崩溃。")]),s._v(" "),t("h4",{attrs:{id:"大量数据同时过期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大量数据同时过期"}},[s._v("#")]),s._v(" 大量数据同时过期")]),s._v(" "),t("p",[s._v("解决方案：")]),s._v(" "),t("ol",[t("li",[s._v("设置不同的过期时间，"),t("strong",[s._v("给这些数据的过期时间加一个随机数")]),s._v("，保证数据不会在同一时间过期，避免大量的请求都发送到数据库；")]),s._v(" "),t("li",[s._v("异步更新缓存，不给缓存设置有效期，后台开启一个线程定时去更新缓存，使缓存永久有效。")])]),s._v(" "),t("h4",{attrs:{id:"redis宕机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis宕机"}},[s._v("#")]),s._v(" Redis宕机")]),s._v(" "),t("p",[s._v("解决方案：")]),s._v(" "),t("ol",[t("li",[s._v("配置Redis集群提高服务可用性，当Redis主节点宕机后，可以将从节点切换成主节点。")]),s._v(" "),t("li",[s._v("熔断限流，为当前缓存业务设置熔断限流策略，当Redis发生缓存雪崩时，开启熔断机制，降级请求或直接返回错误，避免请求发送到数据库，等待Redis恢复后再重新提供服务。")])]),s._v(" "),t("h2",{attrs:{id:"redis过期删除策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis过期删除策略"}},[s._v("#")]),s._v(" Redis过期删除策略")]),s._v(" "),t("blockquote",[t("p",[s._v("惰性删除")])]),s._v(" "),t("p",[s._v("不主动删除过期的key，每次从数据库访问key时，都检查key是否过期，如果过期则删除该key,")]),s._v(" "),t("p",[t("strong",[s._v("优点：")])]),s._v(" "),t("ul",[t("li",[s._v("每次访问key时才检查key是否过期，只会使用很少的系统资源，对CPU友好")])]),s._v(" "),t("p",[t("strong",[s._v("缺点：")])]),s._v(" "),t("ul",[t("li",[s._v("如果一个key已经过期了，而这个key仍然保留在数据库中，如果这个过期key一直没有被访问，它所占用的内存就不会释放，会造成内存空间的浪费")])]),s._v(" "),t("blockquote",[t("p",[s._v("定期删除")])]),s._v(" "),t("p",[s._v("定期删除策略是每隔一段时间从一定量的数据库中取出一定数量的随机 key 进行检查，并删除其中的过期key。")]),s._v(" "),t("p",[t("strong",[s._v("两种模式：")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，可以通过修改redis.conf中hz选项来调整频率")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# The range is between 1 and 500, however a value over 100 is usually not\n# a good idea. Most users should use the default of 10 and raise this up to\n# 100 only in environments where very low latency is required.\nhz 10\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("FAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms")])])]),s._v(" "),t("p",[t("strong",[s._v("优点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("通过限制删除操作执行的时长和频率，来减少删除操作对 CPU 的影响，同时也能删除一部分过期的数据减少了过期键对空间的无效占用。")])]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("内存清理方面没有定时删除效果好，同时没有惰性删除使用的系统资源少。")]),s._v(" "),t("li",[s._v("难以确定删除操作执行的时长和频率。如果执行的太频繁，定期删除策略变得和定时删除策略一样，对CPU不友好；如果执行的太少，那又和惰性删除一样了，过期 key 占用的内存不会及时得到释放。")])]),s._v(" "),t("blockquote",[t("p",[s._v("Redis过期删除策略")])]),s._v(" "),t("p",[s._v("Redis使用惰性删除 + 定期删除两种策略进行配合使用")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expireIfNeeded")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("redisDb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("db"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" robj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keyIsExpired")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("db"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* If we are running in the context of a replica, instead of\n     * evicting the expired key from the database, we return ASAP:\n     * the replica key expiration is controlled by the master that will\n     * send us synthesized DEL operations for expired keys. The\n     * exception is when write operations are performed on writable\n     * replicas.\n     *\n     * Still we try to return the right information to the caller,\n     * that is, 0 if we think the key should be still valid, 1 if\n     * we think the key is expired at this time.\n     *\n     * When replicating commands from the master, keys are never considered\n     * expired. */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("masterhost "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("current_client "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("master"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flags "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" EXPIRE_FORCE_DELETE_EXPIRED"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* In some cases we're explicitly instructed to return an indication of a\n     * missing key without actually deleting it, even on masters. */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flags "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" EXPIRE_AVOID_DELETE_EXPIRED"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* If clients are paused, we keep the current dataset constant,\n     * but return to the client what we believe is the right state. Typically,\n     * at the end of the pause we will properly expire the key OR we will\n     * have failed over and the new primary will send us the expire. */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("checkClientPauseTimeoutAndReturnIfPaused")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Delete the key */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("deleteExpiredKeyAndPropagate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("db"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br")])]),t("h2",{attrs:{id:"redis内存淘汰策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis内存淘汰策略"}},[s._v("#")]),s._v(" Redis内存淘汰策略")]),s._v(" "),t("p",[s._v("当Redis中内存不够用时，此时再向Redis中添加新的key，Redis就会按照某种规则将内存中的数据删除，这种数据的删除策略被称之为"),t("mark",[s._v("内存淘汰策略")])]),s._v(" "),t("p",[s._v("Redis8中不同淘汰策略")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\n# is reached. You can select one from the following behaviors:\n#\n# volatile-lru -> Evict using approximated LRU, only keys with an expire set.\n# allkeys-lru -> Evict any key using approximated LRU.\n# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.\n# allkeys-lfu -> Evict any key using approximated LFU.\n# volatile-random -> Remove a random key having an expire set.\n# allkeys-random -> Remove a random key, any key.\n# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)\n# noeviction -> Don't evict anything, just return an error on write operations.\n#\n# LRU means Least Recently Used\n# LFU means Least Frequently Used\n#\n# Both LRU, LFU and volatile-ttl are implemented using approximated\n# randomized algorithms.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("ol",[t("li",[t("strong",[s._v("volatile-lru")]),s._v("：淘汰所有设置了过期时间的键值中，最久未使用的键值；")]),s._v(" "),t("li",[t("strong",[s._v("allkeys-lru")]),s._v("：淘汰整个键值中最久未使用的键值；")]),s._v(" "),t("li",[s._v("**volatile-lfu **：淘汰所有设置了过期时间的键值中，最少使用的键值；")]),s._v(" "),t("li",[t("strong",[s._v("allkeys-lfu")]),s._v("：淘汰整个键值中最少使用的键值。")]),s._v(" "),t("li",[t("strong",[s._v("volatile-random")]),s._v("：随机淘汰设置了过期时间的任意键值；")]),s._v(" "),t("li",[t("strong",[s._v("allkeys-random")]),s._v("：随机淘汰任意键值;")]),s._v(" "),t("li",[t("strong",[s._v("volatile-ttl")]),s._v("：优先淘汰更早过期的键值。")]),s._v(" "),t("li",[t("strong",[s._v("noeviction")]),s._v("：不淘汰任何key，但内存满时写入数据会报错，"),t("strong",[s._v("默认策略")])])]),s._v(" "),t("blockquote",[t("p",[s._v("LRU（Least Recently Used）")])]),s._v(" "),t("p",[s._v("最近最少使用，用当前时间减去最后使用时间，这个值越大则淘汰的优先级有越高")]),s._v(" "),t("blockquote",[t("p",[s._v("LFU（Least Frequently Used）")])]),s._v(" "),t("p",[s._v("最少频率使用，会统计每个key的访问频率，值越小淘汰优先级越高")])])}),[],!1,null,null,null);t.default=e.exports}}]);