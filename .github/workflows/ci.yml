name: Node.js CI
on:
  push:
    branches: 
      - main
jobs:
  build:
    runs-on: ubuntu-latest #指定运行环境为最新的Ubuntu版本
    strategy:
      matrix:
        node-version: [18.18.0] #指定node版本
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          persist-credentials: false
    - name: Use Node.js ${{ matrix.node-version }} #使用action安装node环境
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
      # 生成静态文件
    - name: Build
      run: set NODE_OPTIONS=--openssl-legacy-provider && yarn && yarn docs:build
          # 生成静态文件
    - name: Deploy
      # 引用别人的部署插件
      uses: JamesIves/github-pages-deploy-action@4.1.3
      with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }} # 也就是我们刚才生成的 secret
          BRANCH: gh-pages # 部署到 gh-pages 分支，因为 main 分支存放的一般是源码，而 gh-pages 分支则用来存放生成的静态文件
          FOLDER: docs/.vuepress/dist # vuepress 生成的静态文件存放的地方

# name: Build and Deploy
# on:
#   push:
#     branches:
#       - main
# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [16.16.0]
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3
#       with:
#           persist-credentials: false
#       # 生成静态文件
#     - name: Build
#       run: yarn && yarn docs:build
#           # 生成静态文件
#     - name: Deploy
#       # 引用别人的部署插件
#       uses: JamesIves/github-pages-deploy-action@4.1.3
#       with:
#           ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }} # 也就是我们刚才生成的 secret
#           BRANCH: gh-pages # 部署到 gh-pages 分支，因为 main 分支存放的一般是源码，而 gh-pages 分支则用来存放生成的静态文件
#           FOLDER: docs/.vuepress/dist # vuepress 生成的静态文件存放的地方
      # env:
      #   ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      #   # TARGET_REPO: cangxiaocoder/docs
      #   TARGET_BRANCH: gh-pages
      #   # BUILD_SCRIPT: yarn && yarn docs:build
      #   BUILD_DIR: docs/.vuepress/dist/
      #   COMMIT_MESSAGE: 笔记、博客
        # CNAME: https://www.xxx.com